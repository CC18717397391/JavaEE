package com.yizhan.util;

import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.Security;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

import com.sun.crypto.provider.SunJCE;

public class DesUtils {

	/**默认密钥*/
	private static String strDefaultKey = "Clear";
	
	/**加密工具*/
	private Cipher encryptCipher;
	
	/**加密工具*/
	private Cipher decryptCipher;
	
	/**
	 * 默认构造，使用默认密钥
	 */
	public DesUtils() throws Exception{
		Security.addProvider(new SunJCE());
		Key key = getKey(strDefaultKey.getBytes());
		encryptCipher = Cipher.getInstance("DES");
		encryptCipher.init(Cipher.ENCRYPT_MODE, key);
		decryptCipher = Cipher.getInstance("DES");
		decryptCipher.init(Cipher.DECRYPT_MODE, key);
	}
	
	
	/**
	 * 生成密钥
	 * 从指定字符串的字节数组生成密钥，取前8位
	 */
	private Key getKey(byte[] arrBTmp){
		byte[] arrB = new byte[8];
		for (int i = 0; i < arrBTmp.length&&i<arrB.length; i++) {
			arrB[i] = arrBTmp[i];
		}
		Key key = new SecretKeySpec(arrB, "DES");
		return key;
	}
	
	/**
	 * 将16进制的字符串转换为数组
	 */
	public static byte[] hexStr2ByteArr(String str){
		byte[] arrB = str.getBytes();
		int iLen = arrB.length;
		byte[] arrOut = new byte[iLen/2];
		for (int i = 0; i < iLen; i=i+2) {
			String strTmp = new String(arrB, i, 2);
			arrOut[i/2] = (byte) Integer.parseInt(strTmp, 16);
		}
		return arrOut;
	}
	
	
	/**
	 * 加密字节数组
	 */
	public byte[] encrypt(byte[] arrB) throws Exception{
		return encryptCipher.doFinal(arrB);
	}
	
	/**
	 * 字符串加密
	 */
	public String encrypt(String str){
		return byteArr2HexStr(encrypt(str.getBytes()));
	}
	
	
	
	
	
}
