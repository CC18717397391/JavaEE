<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
             
             
	<!-- 典型的spring配置文件 ，上面写的一大堆是为了spring的context激活了对标签支持的生命周期的管理-->
	<!-- 本配置文件是连接web.xml中名为mvc-dispatcher的DispatcherServlet使用【其实就是业务DispatcherServlet】， 提供其相关的Spring MVC配置 -->

	<!-- 启用Spring基于annotation的DI依赖注入, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
	<context:annotation-config />

	<!-- 开启自动扫描组件，DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service -->
	<context:component-scan base-package="com.yizhan.*">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<!-- 让mvc搜寻Controller，让控制器与请求之间发生联系 -->
	</context:component-scan>

	<!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 DefaultAnnotationHandlerMapping annotation-driven HandlerMapping -->

	<!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数，让DispatcherServlet启用基于 annotation的HandlerMapping-->
	<mvc:annotation-driven />
	
	
	 
	
	<!-- 静态资源处理， css， js， imgs -->
	<mvc:resources mapping="/**" location="/" />

	<!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		
		<property name="order" value="1" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		
		<property name="defaultContentType" value="text/html" />
		
		<!-- springMVC提供了ContentNegotiatingViewResolver机制来处理这种对相同数据不同呈现方式的应用场景
		如果是用户需要得到HTML的数据呈现，那么将数据代理给JSPView，如果是机器需要JSON格式，那么将数据代理给JSONView
		JSON是一种数据交换的格式，springMVC提供了JSON协同支持机制 -->
		
		<property name="defaultViews">
			<list>
				<!-- JSON View -->					<!-- 使用JSON -->
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
				</bean>
			</list>
		</property>
		<property name="ignoreAcceptHeader" value="true" />
	</bean>
	
	<!-- 用来告诉DispatcherServlet将用哪个ViewResolver获取view ，InternalResourceViewResolver放在最后，因为靠他返回-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsps/" />		<!-- 前缀 -->	
		<property name="suffix" value=".html" />					<!-- 后缀 -->
	</bean>

	<!-- 文件上传模块配置 -->
	<!--200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析延迟加载提高性能，以便捕获文件大小异常 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">		<!-- 依赖upload包 -->
		<property name="maxUploadSize" value="209715200" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="resolveLazily" value="true" />
	</bean>

</beans>