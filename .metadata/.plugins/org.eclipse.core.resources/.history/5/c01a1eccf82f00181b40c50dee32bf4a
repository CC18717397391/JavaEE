package com.imooc.mvcdemo.controller;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.builder.ReflectionToStringBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.imooc.mvcdemo.model.Course;
import com.imooc.mvcdemo.service.CourseService;


@Controller		//注解之后会被DispatcherServlet上下文管理并完成依赖注入，让spring识别这个Controller，并将请求映射到响应的方法
@RequestMapping("/courses")		//url访问 /courses/方法
public class CourseController {
	
	//日志信息，该类库需要在maven的pom.xml中配置
	private static Logger log = LoggerFactory.getLogger(CourseController.class);
	
	//设值注入
	private CourseService courseService;
	//设值注入
	@Autowired
	public void setCourseService(CourseService courseService) {
		this.courseService = courseService;
	}

	
	//本方法将处理 /courses/view?courseId=123 形式的URL
	@RequestMapping(value="/view", method=RequestMethod.GET)	//只处理由get/post方法传递过来的请求
	public String viewCourse(@RequestParam("courseId") Integer courseId,		//@RequestParam识别url传递过来以courseId=的参数
			Model model) {		//该Model类型是springMVC中特有的类型
		
		log.debug("In viewCourse, courseId = {}", courseId);
		Course course = courseService.getCoursebyId(courseId);
		model.addAttribute(course);		//DAO层返回的数据放入model中
		return "course_overview";		//此处返回会对应jsp名字
	}
	
	//本方法将处理 /courses/view2/123 形式的URL
	@RequestMapping("/view2/{courseId}")
	public String viewCourse2(@PathVariable("courseId") Integer courseId,
			Map<String, Object> model) {						//springMVC中model的三种形式MAP
		
		log.debug("In viewCourse2, courseId = {}", courseId);
		Course course = courseService.getCoursebyId(courseId);
		model.put("course",course);
		return "course_overview";
	}

	//在代码中使用古老的HttpServletRequest方式处理逻辑
	//本方法将处理 /courses/view3?courseId=123 形式的URL
	@RequestMapping("/view3")
	public String viewCourse3(HttpServletRequest request) {
		
		Integer courseId = Integer.valueOf(request.getParameter("courseId"));		
		Course course = courseService.getCoursebyId(courseId);
		request.setAttribute("course",course);
		return "course_overview";
	}
	
	
	
	
	
	/*
	 * 课程添加及保存的维护
	 * 绑定Binding：将请求中的字段按照名字匹配的原则填入模型对象    	玛德：就是将HTML表单中的name和后台的bean的属性绑定
	 */
	//添加课程第一步，通过http://localhost:8080/courses/admin?add至此【因为下面加了params参数】，再跳向edit.jsp 的修改页面
	@RequestMapping(value="/admin", method = RequestMethod.GET, params = "add")		//上面单独只写一个属性就是value
	public String createCourse(){
		return "course_admin/edit";	//映射多目录，玛德藏得深
	}
	
	
	//添加课程第二步，edit.jsp页面提交的内容至此
	@RequestMapping(value="/save", method = RequestMethod.POST)
	public String  doSave(@ModelAttribute Course course){		//@ModelAttribute方法参数级别的	进行页面表单name和bean的属性绑定	
		
		log.debug("Info of Course:");
		log.debug(ReflectionToStringBuilder.toString(course));		//ReflectionToStringBuilder是阿帕奇lang包下的builder类，进行日志的输出常用
		
		//在此进行业务操作，比如数据库持久化
		course.setCourseId(123);
		return "redirect:view2/"+course.getCourseId();		//重定向redirect/forward:url
	}
	
	
	//文件上传，1.访问该路径跳转至上传页面springMVC提供了内置支持作为公共服务
	@RequestMapping(value="/upload", method=RequestMethod.GET)
	public String showUploadPage(@RequestParam(value= "multi", required = false) Boolean multi){	
		if(multi != null && multi){
			return "course_admin/multifile";	
		}
		return "course_admin/file";		
	}
	
	//文件上传，2.file页面上传跳转至此
	@RequestMapping(value="/doUpload", method=RequestMethod.POST)
	public String doUploadFile(@RequestParam("file") MultipartFile file) throws IOException{
		
		if(!file.isEmpty()){
			log.debug("Process file: {}", file.getOriginalFilename());		//日志输出
			FileUtils.copyInputStreamToFile(file.getInputStream(), new File("c:\\imooc\\", System.currentTimeMillis()+ file.getOriginalFilename()));
		}
		
		return "success";
	}
	
	//HttpServletRequest方式
	@RequestMapping(value="/doUpload2", method=RequestMethod.POST)
	public String doUploadFile2(MultipartHttpServletRequest multiRequest) throws IOException{
		
		Iterator<String> filesNames = multiRequest.getFileNames();
		while(filesNames.hasNext()){
			String fileName =filesNames.next();
			MultipartFile file =  multiRequest.getFile(fileName);
			if(!file.isEmpty()){
				log.debug("Process file: {}", file.getOriginalFilename());
				FileUtils.copyInputStreamToFile(file.getInputStream(), new File("c:\\imooc\\", System.currentTimeMillis()+ file.getOriginalFilename()));
			}
			
		}
		
		return "success";
	}
	
	
	//JSON		@ResponseBody最简洁方式，无需其他配置
	@RequestMapping(value="/{courseId}",method=RequestMethod.GET)
	public @ResponseBody Course getCourseInJson(@PathVariable Integer courseId){
		return  courseService.getCoursebyId(courseId);
	}
	
	//使用@PathVariable关联我们的查询参数和方法参数，返回值是一个泛型类：ResponseEntity<Course>，springMVC为我们抽象了实体，用泛型的方式包裹了我们的类
	//http://localhost:8080/courses/jsontype/123
	@RequestMapping(value="/jsontype/{courseId}",method=RequestMethod.GET)
	public  ResponseEntity<Course> getCourseInJson2(@PathVariable Integer courseId){
		Course course =   courseService.getCoursebyId(courseId);		
		return new ResponseEntity<Course>(course, HttpStatus.OK);		//返回格式
	}
	
	
	
}
